#!/usr/bin/env ruby

require 'fileutils'
require 'etc'
require 'socket'

APP_ROOT = "/home/webapp/webapp/current"
FOREMAN_BIN = "RBENV_ROOT=/home/webapp/.rbenv exec /home/webapp/.rbenv/libexec/rbenv exec foreman"
PROCFILE = "#{APP_ROOT}/Procfile"
PIDFILE = "/var/run/foreman.pid"
LOG_DIR = "/home/webapp/webapp/current/logs"
RUN_AS_USER = "webapp"
DAEMON_PIDFILE = "/var/run/foreman-server.pid"
FOREMAN_START_COMMAND = "#{FOREMAN_BIN} start -f #{PROCFILE} -d #{APP_ROOT} > #{LOG_DIR}/foreman.log 2>&1"

def start_foreman
  Dir.chdir APP_ROOT
  FileUtils.mkdir_p LOG_DIR
  foreman_pid = spawn("sh -c \"#{FOREMAN_START_COMMAND}\" webapp")
  Process.detach(foreman_pid)
  File.write(PIDFILE, foreman_pid.to_s)
  puts "Foreman started with PID: #{foreman_pid}"
  sleep 1
  exit 1 unless process_alive?(PIDFILE)
end

def kill_all_foreman_processes
  begin
    all_foreman_process_pids = `ps aux | grep foreman | grep -v grep | grep -v foremand | awk '{print $2}'`.split("\n")
    all_foreman_process_pids.each do |foreman_process_pid|
      begin
        Process.kill('TERM', foreman_process_pid.to_i)
      rescue StandardError => e
        nil
      end
    end
    puts "Killed any additional foreman processes"
  rescue StandardError => e
    nil
  end
end

def stop_foreman
  if process_alive?(PIDFILE)
    foreman_pid = File.read(PIDFILE).to_i
    Process.kill('TERM', foreman_pid)
    FileUtils.rm_f(PIDFILE)
    puts "Foreman stopped"
    sleep 3
    kill_all_foreman_processes
  else
    puts "Foreman is not running"
  end
end

def foreman_status(io)
  if process_alive?(PIDFILE)
    foreman_pid = File.read(PIDFILE).to_i
    io.write "Foreman is running with PID: #{foreman_pid}"
  else
    io.write "Foreman is not running"
    FileUtils.rm_f(PIDFILE) if File.exist?(PIDFILE)
    exit 1
  end
end

def start_server
  Socket.unix_server_loop("/var/run/foremand.sock") do |sock, client|
    begin
      case sock.readline.chomp.downcase
      when 'start'
        start_foreman(sock)
      when 'stop'
        stop_foreman(sock)
      when 'status'
        foreman_status(sock)
      else
        puts "Unknown command. Usage: formand <start|stop|status>"
      end
    ensure
      sock.close
      client.disconnect
    end
  end
end

def daemonize
  exit if fork
  Process.setsid
  exit if fork
  Dir.chdir '/'
  File.umask 0000

  STDIN.reopen '/dev/null'
  STDOUT.reopen '/dev/null', 'a'
  STDERR.reopen STDOUT
end


if ARGV.empty?
  puts "Usage: foremand-server start"
  exit 1
elsif ARGV[0].downcase == 'start'
  daemonize
  start_server
elsif ARGV[0].downcase == 'run'
  start_server
else
  puts "Unknown command. Usage: formand start"
  exit 1
end

def run_foreman
  foreman_pid = spawn("#{FOREMAN_BIN} start -f #{PROCFILE} -d #{APP_ROOT} > #{LOG_DIR}/foreman.log 2>&1")
  Process.detach(foreman_pid)
  File.write(PIDFILE, foreman_pid.to_s)
end

def write_daemon_pid_file
  File.write(DAEMON_PIDFILE, Process.pid.to_s)
end

def setup_signal_handling
  [:INT, :QUIT, :TERM].each do |signal|
    Signal.trap(signal) do
      if File.exist?(PIDFILE)
        foreman_pid = File.read(PIDFILE).to_i
        Process.kill(signal, foreman_pid)
        FileUtils.rm_f(PIDFILE)
      end
      FileUtils.rm_f(DAEMON_PIDFILE)
      puts "Daemon terminated by #{signal}"
      exit
    end
  end
end

def process_alive?(pidfile)
  return false unless File.exist?(pidfile)

  pid = File.read(pidfile).to_i
  begin
    Process.kill(0, pid)
    return true
  rescue Errno::ESRCH
    return false
  rescue Errno::EPERM
    return true
  end
end

def start_daemon
  if process_alive?(DAEMON_PIDFILE)
    daemon_pid = File.read(DAEMON_PIDFILE).to_i
    puts "Daemon is already running with PID: #{daemon_pid}"
    exit 1
  else
    FileUtils.rm_f(DAEMON_PIDFILE) if File.exist?(DAEMON_PIDFILE)
    puts "Starting daemon..."
  end

  daemonize
  write_daemon_pid_file
  setup_signal_handling
  run_foreman
end

def stop_daemon
  if process_alive?(DAEMON_PIDFILE)
    daemon_pid = File.read(DAEMON_PIDFILE).to_i
    Process.kill('TERM', daemon_pid)
    FileUtils.rm_f(DAEMON_PIDFILE)
    puts "Daemon stopped"
  else
    puts "Daemon is not running"
    FileUtils.rm_f(DAEMON_PIDFILE) if File.exist?(DAEMON_PIDFILE)
  end
end

def daemon_status
  if process_alive?(DAEMON_PIDFILE)
    daemon_pid = File.read(DAEMON_PIDFILE).to_i
    puts "Daemon is running with PID: #{daemon_pid}"
  else
    puts "Daemon is not running"
    FileUtils.rm_f(DAEMON_PIDFILE) if File.exist?(DAEMON_PIDFILE)
  end
end